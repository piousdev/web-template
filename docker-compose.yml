# Docker Compose configuration for local development
# This sets up a complete development environment with Next.js, PostgreSQL, and Redis
#
# Usage:
#   docker-compose up -d          # Start all services in background
#   docker-compose down           # Stop all services
#   docker-compose logs -f app    # View app logs
#   docker-compose exec app sh    # Access app container shell

version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: template-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-template_dev}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-scram-sha-256}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS:--auth-host=scram-sha-256}
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Optional: mount init scripts
      # - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-template_dev}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: template-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password} --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Next.js Application
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: runner
    container_name: template-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # App Configuration
      NODE_ENV: development
      PORT: 3000
      NEXT_PUBLIC_APP_URL: http://localhost:3000

      # Database Configuration
      # Use service names as hostnames within Docker Compose network
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-template_dev}

      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379

      # Pass through other environment variables
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET}
      BETTER_AUTH_URL: ${BETTER_AUTH_URL:-http://localhost:3000}

      # Email Service (Resend)
      RESEND_API_KEY: ${RESEND_API_KEY}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@example.com}

      # Payment Service (Polar)
      POLAR_ACCESS_TOKEN: ${POLAR_ACCESS_TOKEN}
      POLAR_WEBHOOK_SECRET: ${POLAR_WEBHOOK_SECRET}

      # Storage Service (Cloudflare R2)
      R2_ACCOUNT_ID: ${R2_ACCOUNT_ID}
      R2_ACCESS_KEY_ID: ${R2_ACCESS_KEY_ID}
      R2_SECRET_ACCESS_KEY: ${R2_SECRET_ACCESS_KEY}
      R2_BUCKET_NAME: ${R2_BUCKET_NAME}
      R2_PUBLIC_URL: ${R2_PUBLIC_URL}

      # Monitoring (Sentry)
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_AUTH_TOKEN: ${SENTRY_AUTH_TOKEN}

      # Internationalization
      ENABLE_I18N: ${ENABLE_I18N:-true}
    ports:
      - '${APP_PORT:-3000}:3000'
    volumes:
      # Mount source code for hot reload in development
      - .:/app
      - /app/node_modules
      - /app/.next
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'bun', 'run', '-e', "fetch('http://localhost:3000/api/health').then(r => r.ok ? process.exit(0) : process.exit(1)).catch(() => process.exit(1))"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Custom network for service communication
networks:
  app-network:
    driver: bridge
