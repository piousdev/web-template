# Load Testing Workflow with k6
# Runs performance tests against the deployed application
#
# This workflow can be:
# - Triggered manually via workflow_dispatch
# - Scheduled to run periodically
# - Run after successful deployments
#
# Secrets/Variables required:
# - LOAD_TEST_URL: The URL to test (e.g., https://your-app.fly.dev)
# - TEST_USER_EMAIL: Email for authenticated load tests
# - TEST_USER_PASSWORD: Password for authenticated load tests

name: Load Testing

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      test_stage:
        description: 'Test stage to run (smoke, load, stress, spike, soak)'
        required: true
        default: 'smoke'
        type: choice
        options:
          - smoke
          - load
          - stress
          - spike
          - soak
      target_url:
        description: 'Target URL to test'
        required: false
        default: ''
        type: string

  # Run after successful deployment
  workflow_run:
    workflows: ["Deploy to Fly.io"]
    types:
      - completed

  # Schedule weekly load tests (every Monday at 2 AM UTC)
  schedule:
    - cron: '0 2 * * 1'

# Prevent multiple load tests from running simultaneously
concurrency:
  group: load-test-${{ github.ref }}
  cancel-in-progress: false

jobs:
  load-test:
    name: k6 Load Test
    runs-on: ubuntu-latest
    timeout-minutes: 60
    # Only run on successful deployment or manual trigger
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Verify k6 installation
        run: k6 version

      - name: Determine test stage
        id: test-stage
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "stage=${{ github.event.inputs.test_stage }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            echo "stage=load" >> $GITHUB_OUTPUT
          else
            echo "stage=smoke" >> $GITHUB_OUTPUT
          fi

      - name: Determine target URL
        id: target-url
        run: |
          if [ "${{ github.event.inputs.target_url }}" != "" ]; then
            echo "url=${{ github.event.inputs.target_url }}" >> $GITHUB_OUTPUT
          elif [ -n "${{ secrets.LOAD_TEST_URL }}" ]; then
            echo "url=${{ secrets.LOAD_TEST_URL }}" >> $GITHUB_OUTPUT
          else
            # Get app name from fly.toml
            APP_NAME=$(grep "^app = " fly.toml | cut -d'"' -f2)
            echo "url=https://${APP_NAME}.fly.dev" >> $GITHUB_OUTPUT
          fi

      - name: Run k6 load test
        run: |
          k6 run \
            -e TEST_STAGE=${{ steps.test-stage.outputs.stage }} \
            -e BASE_URL=${{ steps.target-url.outputs.url }} \
            -e TEST_USER_EMAIL=${{ secrets.TEST_USER_EMAIL || 'load-test@example.com' }} \
            -e TEST_USER_PASSWORD=${{ secrets.TEST_USER_PASSWORD || 'LoadTest123!' }} \
            --out json=results.json \
            tests/load/api.load.js

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: k6-results-${{ steps.test-stage.outputs.stage }}-${{ github.run_number }}
          path: |
            results.json
            summary.json
          retention-days: 30

      - name: Generate test summary
        if: always()
        run: |
          echo "# Load Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Stage:** ${{ steps.test-stage.outputs.stage }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target URL:** ${{ steps.target-url.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "summary.json" ]; then
            echo "## Summary" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat summary.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check test thresholds
        if: always()
        run: |
          # Extract metrics from results
          if [ -f "results.json" ]; then
            # Check if any thresholds failed
            FAILURES=$(grep -c '"failed":true' results.json || echo "0")

            if [ "$FAILURES" -gt "0" ]; then
              echo "❌ Load test thresholds failed"
              echo "Failed checks: $FAILURES"
              exit 1
            else
              echo "✅ All load test thresholds passed"
            fi
          fi

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let summary = 'Load test completed';

            if (fs.existsSync('summary.json')) {
              const data = JSON.parse(fs.readFileSync('summary.json', 'utf8'));
              summary = `
              ## Load Test Results

              **Stage:** ${{ steps.test-stage.outputs.stage }}
              **URL:** ${{ steps.target-url.outputs.url }}

              ### Metrics
              - **Requests:** ${data.metrics.http_reqs.values.count}
              - **Failed Requests:** ${(data.metrics.http_req_failed.values.rate * 100).toFixed(2)}%
              - **Avg Duration:** ${data.metrics.http_req_duration.values.avg.toFixed(2)}ms
              - **P95 Duration:** ${data.metrics.http_req_duration.values['p(95)'].toFixed(2)}ms
              - **P99 Duration:** ${data.metrics.http_req_duration.values['p(99)'].toFixed(2)}ms

              [View detailed results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              `;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Notify on failure
  notify-failure:
    name: Notify Load Test Failure
    runs-on: ubuntu-latest
    needs: load-test
    if: failure()

    steps:
      - name: Load test failed notification
        run: |
          echo "❌ Load test failed!"
          echo "Test stage: ${{ needs.load-test.outputs.stage }}"
          echo "Please review the results and investigate performance issues."
